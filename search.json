[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"Ribo-Seq, short Ribosome profiling sequencing, high-throughput sequencing technology used study protein composition translational efficiency transcripts cells. technique utilizes chemical biological methods covalently link ribosomes mRNA translating moment translation, allowing mRNA bound ribosomes sequenced. enables quantitative analysis translation levels positions transcript.tools available analyzing Ribo-seq sequencing data, focus either upstream data processing downstream data visualization. However, tools often require users write shell commands Unix system process raw data switch another IDE visualize processed data, can quite inconvenient.R users, convenient perform necessary tasks within environment. Using R functions system system2 allows execute shell commands R, enabling call Linux software directly R. However, important note many bioinformatics software programs run Windows.’re using Windows, alternative option use Windows version software built using MinGW tools. Additionally, several R-based software programs available complete upstream steps, Rbowtie2, Rhisat2, Rsubread.RiboProfiler integrates upstream raw data analysis downstream data visualization. steps can done R environment. can also analysis common ribo-seq SeRP-seq(Selective ribosome profiling).Citation: Jun Zhang (2023). RiboProfiler: Integrating Ribo-SEQ Upstream Downstream Analysis. https://github.com/junjunlab/RiboProfilerMake sure isntalled julia python. can install development version RiboProfiler:","code":"\n# install.packages(\"devtools\")\ndevtools::install_github(\"junjunlab/RiboProfiler\")\n\n# or\nremotes::install_github(\"junjunlab/RiboProfiler\")\n\nlibrary(RiboProfiler)"},{"path":"workflow.html","id":"workflow","chapter":"2 Workflow","heading":"2 Workflow","text":"RiboProfiler two main mapping strategies: genome-based transcriptome-based. Since mature RNA typically bound ribosomes translation protein, recommend aligning reads transcriptome. choose align reads genome instead, can transform resulting alignment positions transcriptomic positions using gene annotation file (GTF).transcriptome-based mapping, select longest CDS transcript input. multiple transcripts CDS length, choose one longest exon length.paired end sequencing, just use one perform analysis read1.’s simplified flowchart illustrate process:","code":""},{"path":"align-on-genome.html","id":"align-on-genome","chapter":"3 Align on genome","heading":"3 Align on genome","text":"chapter describe total ribo-seq workflow aligning reads genome. test dataset \nGSE157519(Adaptive translational pausing hallmark cellular response severe environmental stress). can download raw fastq files \nfollow analysis flow.","code":""},{"path":"align-on-genome.html","id":"check-papers-data-processing","chapter":"3 Align on genome","heading":"3.1 Check papers data processing","text":"RNA-seq data generated using paired-end sequencing, Ribo-seq data generated using single-end sequencing. convenience, used read1 RNA-seq data input analysis.\nfollows details paper’s data processing:","code":""},{"path":"align-on-genome.html","id":"trim-adaptors","chapter":"3 Align on genome","heading":"3.2 Trim adaptors","text":"raw fastq files:First trim adapters Ribo-seq using batch_adpator_remove function:trim left right bases remaing reads:Finally trim adapters RNA-seq:","code":"\nlibrary(RiboProfiler)\n# ┌────────────────────────────────────────────────────────────────┐\n# │                                                                │\n# │   Welcome to use RiboProfiler package for Ribo-seq analysis.   │\n# │                                                                │\n# └────────────────────────────────────────────────────────────────┘\n# \n# The version of RiboProfiler: 0.0.5 \n# Any advice or suggestions please contact with me: 3219030654@stu.cpu.edu.cn.\n\nlist.files(\"1.raw-data/\",\"*.gz\")\n# [1] \"SRR12594201.fastq.gz\"   \"SRR12594205.fastq.gz\"   \"SRR12594209.fastq.gz\"  \n# [4] \"SRR12594210.fastq.gz\"   \"SRR12594214.fastq.gz\"   \"SRR12594218.fastq.gz\"  \n# [7] \"SRR12594219_1.fastq.gz\" \"SRR12594223_1.fastq.gz\" \"SRR12594227_1.fastq.gz\"\n# [10] \"SRR12594228_1.fastq.gz\" \"SRR12594232_1.fastq.gz\" \"SRR12594236_1.fastq.gz\"\ndir.create(\"2.trim-data\")\n\n# test function\nfq <- list.files(path = \"1.raw-data/\",pattern = \".gz\",full.names = T)\n\nrmd1 <- batch_adpator_remove(fastq_file1 = fq[1:6],\n                             output_dir = \"2.trim-data/\",\n                             output_name = paste(\"tmp_\",sapply(strsplit(fq[1:6],split = \"\\\\.|/\"), \"[\",3),\n                                                 sep = \"\"),\n                             fastp_params = list(minReadLength = 15,\n                                                 adapterSequenceRead1 = \"CTGTAGGCACCATCAAT\",\n                                                 thread = 24))\n# ▶ tmp_SRR12594201 has been processed!\n# ▶ tmp_SRR12594205 has been processed!\n# ▶ tmp_SRR12594209 has been processed!\n# ▶ tmp_SRR12594210 has been processed!\n# ▶ tmp_SRR12594214 has been processed!\n# ▶ tmp_SRR12594218 has been processed!\n# trim bases form left and right\nrmd2 <- batch_adpator_remove(fastq_file1 = list.files(\"2.trim-data/\",pattern = \".gz\",\n                                                      full.names = T),\n                             output_dir = \"2.trim-data/\",\n                             output_name = sapply(strsplit(fq[1:6],split = \"\\\\.|/\"), \"[\",3),\n                             fastp_params = list(trimFrontRead1 = 6,\n                                                 trimTailRead1 = 4,\n                                                 adapterTrimming = FALSE,\n                                                 thread = 16))\n\n# ▶ SRR12594201 has been processed!\n# ▶ SRR12594205 has been processed!\n# ▶ SRR12594209 has been processed!\n# ▶ SRR12594210 has been processed!\n# ▶ SRR12594214 has been processed!\n# ▶ SRR12594218 has been processed!\n\n# remove tmp\nfile.remove(list.files(\"2.trim-data/\",pattern = \"^tmp\",full.names = T))\n# ==============================================================================\n# trim rna adapters\n# ==============================================================================\nrmd3 <- batch_adpator_remove(fastq_file1 = fq[7:12],\n                             output_dir = \"2.trim-data/\",\n                             output_name = sapply(strsplit(fq[7:12],split = \"\\\\.|/\"), \"[\",3),\n                             fastp_params = list(minReadLength = 15,\n                                                 trimFrontRead1 = 1,\n                                                 adapterSequenceRead1 = \"AGATCGGAAGAG\",\n                                                 trimTailRead1 = 90,\n                                                 thread = 16))\n\n# ▶ SRR12594219_1 has been processed!\n# ▶ SRR12594223_1 has been processed!\n# ▶ SRR12594227_1 has been processed!\n# ▶ SRR12594228_1 has been processed!\n# ▶ SRR12594232_1 has been processed!\n# ▶ SRR12594236_1 has been processed!"},{"path":"align-on-genome.html","id":"build-index","chapter":"3 Align on genome","heading":"3.3 Build index","text":"","code":""},{"path":"align-on-genome.html","id":"build-index-for-trna-and-rrna","chapter":"3 Align on genome","heading":"3.3.1 Build index for tRNA and rRNA","text":"fetch_trRNA_from_NCBI function can download rRNA tRNA sequences NCBI, just supplying \nspecies:can check sequence:trRNA_index_build used build index based bowtie2 software:","code":"\n# download mouse rRNA and tRNA\nfetch_trRNA_from_NCBI(species = \"Mus musculus\")\n# ┌──────────────────────────────────────────────────────────────┐\n# │                                                              │\n# │   Download tRNA and rRNA sequences from NCBI has finished!   │\n# │                                                              │\n# └──────────────────────────────────────────────────────────────┘\n# ▶ Here are some common species Latin names:\n#   \n#   人类(Homo sapiens), 大鼠(Rattus norvegicus), 小鼠(Mus musculus),\n# 斑马鱼(Danio rerio), 红毛猩猩(Pan troglodytes), 家犬(Canis familiaris),\n# 草履虫(Dictyostelium discoideum), 猴子(Macaca mulatta), 红松鼠(Tamiasciurus hudsonicus),\n# 家兔(Oryctolagus cuniculus), 黄鼠狼(Cricetulus griseus), 南方豹猫(Prionailurus rubiginosus),\n# 畜牛(Bos taurus), 绿猴(Chlorocebus sabaeus), 绵羊(Ovis aries),\n# 猪(Sus scrofa), 验血鸟(Taeniopygia guttata), 萨摩耶犬(Canis lupus familiaris),\n# 膜骨鱼(Takifugu rubripes), 猫(Felis catus), 银狐(Vulpes vulpes),\n# 水稻(Oryza sativa), 吸血蝙蝠(Desmodus rotundus), 巴西三带蚊(Aedes aegypti),\n# 印度大象(Elephas maximus), 狼(Canis lupus), 仓鼠(Cricetulus griseus),\n# 刺参(Strongylocentrotus purpuratus), 山羊(Capra hircus), 兔子(Oryctolagus cuniculus),\n# 黄猴(Macaca fascicularis), 石斑鱼(Epinephelus coioides), 柴犬(Canis lupus familiaris),\n# 蚯蚓(Eisenia fetida), 小萤火虫(Luciola cruciata), 白化病毒(White spot syndrome virus),\n# 河北地蜂(Apis cerana), 喜马拉雅兔(Ochotona curzoniae), 裸鼠(Heterocephalus glaber),\n# 马(Equus caballus), 胡萝卜野生种(Daucus carota subsp. carota), 水牛(Bubalus bubalis),\n# 歌鸲(Erithacus rubecula), 美国黑熊(Ursus americanus), 鲨鱼(Callorhinchus milii),\n# 大黄蜂(Vespa mandarinia), 蜡螟(Galleria mellonella), 黄斑蝶(Papilio xuthus),\n# 皇家企鹅(Aptenodytes forsteri), 银河野猪(Sus scrofa)\nsystem(\"head Mus_musculus_trRNA.fa\")\n# >NR_003278.3 Mus musculus 18S ribosomal RNA (Rn18s), ribosomal RNA\n# ACCTGGTTGATCCTGCCAGGTAGCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCTAAGTACGCACGGCCGGTACAG\n# TGAAACTGCGAATGGCTCATTAAATCAGTTATGGTTCCTTTGGTCGCTCGCTCCTCTCCTACTTGGATAACTGTGGTAAT\n# TCTAGAGCTAATACATGCCGACGGGCGCTGACCCCCCTTCCCGGGGGGGGATGCGTGCATTTATCAGATCAAAACCAACC\n# CGGTGAGCTCCCTCCCGGCTCCGGCCGGGGGTCGGGCGCCGGCGGCTTGGTGACTCTAGATAACCTCGGGCCGATCGCAC\n# GCCCCCCGTGGCGGCGACGACCCATTCGAACGTCTGCCCTATCAACTTTCGATGGTAGTCGCCGTGCCTACCATGGTGAC\n# CACGGGTGACGGGGAATCAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGAAGGCAGCAGGC\n# GCGCAAATTACCCACTCCCGACCCGGGGAGGTAGTGACGAAAAATAACAATACAGGACTCTTTCGAGGCCCTGTAATTGG\n# AATGAGTCCACTTTAAATCCTTTAACGAGGATCCATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAATTCCAGCTCC\n# AATAGCGTATATTAAAGTTGCTGCAGTTAAAAAGCTCGTAGTTGGATCTTGGGAGCGGGCGGGCGGTCCGCCGCGAGGCG\n# [1] 0\n# buid index for tRNA and tRNA\ntrRNA_index_build(trRNA_file = \"Mus_musculus_trRNA.fa\",\n                  prefix = \"GRCm38_trRNA\")\n# ┌────────────────────────────────────────────────────┐\n# │                                                    │\n# │   Building index for tRNA and rRNA has finished!   │\n# │                                                    │\n# └────────────────────────────────────────────────────┘"},{"path":"align-on-genome.html","id":"build-index-for-genome","chapter":"3 Align on genome","heading":"3.3.2 Build index for genome","text":"Genome sequence can downloaded database like ensembl, UCSC, gencode. use\nmouse GRCm38 genome sequence ensembl. reference_index_build used build index based Rhisat2 software:","code":"\nreference_index_build(reference_file = \"Mus_musculus.GRCm38.dna.primary_assembly.fa\",\n                      prefix = \"GRCm38_ref\",\n                      threads = 8)\n# ┌────────────────────────────────────────────────────┐\n# │                                                    │\n# │   Building index for reference has finished!       │\n# │                                                    │\n# └────────────────────────────────────────────────────┘"},{"path":"align-on-genome.html","id":"check-index-files","chapter":"3 Align on genome","heading":"3.4 Check index files","text":"index files save 0.index-data/ directory:","code":"\nlist.files(\"0.index-data/\",recursive = T)\n# [1] \"ref-index/GRCm38_ref.1.ht2\"         \"ref-index/GRCm38_ref.2.ht2\"\n# [3] \"ref-index/GRCm38_ref.3.ht2\"         \"ref-index/GRCm38_ref.4.ht2\"\n# [5] \"ref-index/GRCm38_ref.5.ht2\"         \"ref-index/GRCm38_ref.6.ht2\"\n# [7] \"ref-index/GRCm38_ref.7.ht2\"         \"ref-index/GRCm38_ref.8.ht2\"\n# [9] \"rtRNA-index/GRCm38_trRNA.1.bt2\"     \"rtRNA-index/GRCm38_trRNA.2.bt2\"\n# [11] \"rtRNA-index/GRCm38_trRNA.3.bt2\"     \"rtRNA-index/GRCm38_trRNA.4.bt2\"\n# [13] \"rtRNA-index/GRCm38_trRNA.rev.1.bt2\" \"rtRNA-index/GRCm38_trRNA.rev.2.bt2\""},{"path":"align-on-genome.html","id":"remove-rrna-and-trna-contamination","chapter":"3 Align on genome","heading":"3.5 Remove rRNA and tRNA contamination","text":"RNA content prokaryotic eukaryotic cell consists 80–90% rRNA, 10–15% transfer RNA (tRNA) 3–7% messenger RNA (mRNA) regulatory ncRNA.presence abundant rRNA can introduce substantial bias transcriptome data. number protein coding genes contain rRNA-like sequence segments, expression levels can strongly overestimated unless rRNA reads removed. Furthermore, rRNA removal can greatly reduce data size downstream analysis accelerate entire workflow. align reads tRNA rRNA sequences remove reads come tRNA rRNA.bowtie2_align try download windows executable bowtie2 software bowtie2. can download failed. Making sure software parent directory:Now remove tRNA rRNA sequences using bowtie2:","code":"\nlist.files(\"bowtie2-2.5.1-mingw-x86_64/\",full.names = T) |>\n  head()\n# [1] \"bowtie2-2.5.1-mingw-x86_64/AUTHORS\"              \n# [2] \"bowtie2-2.5.1-mingw-x86_64/bowtie2\"              \n# [3] \"bowtie2-2.5.1-mingw-x86_64/bowtie2-align-l\"      \n# [4] \"bowtie2-2.5.1-mingw-x86_64/bowtie2-align-l-debug\"\n# [5] \"bowtie2-2.5.1-mingw-x86_64/bowtie2-align-s\"      \n# [6] \"bowtie2-2.5.1-mingw-x86_64/bowtie2-align-s-debug\"\n# ==============================================================================\n# remove trRNA sequence\n# ==============================================================================\ndir.create(\"3.rmtrRNA-data\")\n# loop for remove trRNA sequence\nclean_fq <- list.files(\"2.trim-data/\",pattern = \".fastq.gz\",full.names = T)\nclean_fq\n# [1] \"2.trim-data/SRR12594201_R1.fastq.gz\"   \"2.trim-data/SRR12594205_R1.fastq.gz\"  \n# [3] \"2.trim-data/SRR12594209_R1.fastq.gz\"   \"2.trim-data/SRR12594210_R1.fastq.gz\"  \n# [5] \"2.trim-data/SRR12594214_R1.fastq.gz\"   \"2.trim-data/SRR12594218_R1.fastq.gz\"  \n# [7] \"2.trim-data/SRR12594219_1_R1.fastq.gz\" \"2.trim-data/SRR12594223_1_R1.fastq.gz\"\n# [9] \"2.trim-data/SRR12594227_1_R1.fastq.gz\" \"2.trim-data/SRR12594228_1_R1.fastq.gz\"\n# [11] \"2.trim-data/SRR12594232_1_R1.fastq.gz\" \"2.trim-data/SRR12594236_1_R1.fastq.gz\"\noutput_sam <- paste(\"3.rmtrRNA-data/\",sapply(strsplit(clean_fq,split = \"\\\\.|/\"), \"[\",3),\n                    \".sam\",sep = \"\")\noutput_sam\n# [1] \"3.rmtrRNA-data/SRR12594201_R1.sam\"   \"3.rmtrRNA-data/SRR12594205_R1.sam\"  \n# [3] \"3.rmtrRNA-data/SRR12594209_R1.sam\"   \"3.rmtrRNA-data/SRR12594210_R1.sam\"  \n# [5] \"3.rmtrRNA-data/SRR12594214_R1.sam\"   \"3.rmtrRNA-data/SRR12594218_R1.sam\"  \n# [7] \"3.rmtrRNA-data/SRR12594219_1_R1.sam\" \"3.rmtrRNA-data/SRR12594223_1_R1.sam\"\n# [9] \"3.rmtrRNA-data/SRR12594227_1_R1.sam\" \"3.rmtrRNA-data/SRR12594228_1_R1.sam\"\n# [11] \"3.rmtrRNA-data/SRR12594232_1_R1.sam\" \"3.rmtrRNA-data/SRR12594236_1_R1.sam\"\nrm_trRNAfq <- paste(\"3.rmtrRNA-data/\",sapply(strsplit(clean_fq,split = \"\\\\.|/\"), \"[\",3),\n                    \"_rmtrRNA.fq\",sep = \"\")\n# [1] \"3.rmtrRNA-data/SRR12594201_R1_rmtrRNA.fq\"   \"3.rmtrRNA-data/SRR12594205_R1_rmtrRNA.fq\"  \n# [3] \"3.rmtrRNA-data/SRR12594209_R1_rmtrRNA.fq\"   \"3.rmtrRNA-data/SRR12594210_R1_rmtrRNA.fq\"  \n# [5] \"3.rmtrRNA-data/SRR12594214_R1_rmtrRNA.fq\"   \"3.rmtrRNA-data/SRR12594218_R1_rmtrRNA.fq\"  \n# [7] \"3.rmtrRNA-data/SRR12594219_1_R1_rmtrRNA.fq\" \"3.rmtrRNA-data/SRR12594223_1_R1_rmtrRNA.fq\"\n# [9] \"3.rmtrRNA-data/SRR12594227_1_R1_rmtrRNA.fq\" \"3.rmtrRNA-data/SRR12594228_1_R1_rmtrRNA.fq\"\n# [11] \"3.rmtrRNA-data/SRR12594232_1_R1_rmtrRNA.fq\" \"3.rmtrRNA-data/SRR12594236_1_R1_rmtrRNA.fq\"\n\n# batch align\nlapply(seq_along(clean_fq),function(x){\n  bowtie2_align(index = \"0.index-data/rtRNA-index/GRCm38_trRNA\",\n                fq_file1 = clean_fq[x],\n                output_file = output_sam[x],\n                threads = 24,\n                bowtie2_params = paste(\"--un \",rm_trRNAfq[x],sep = \"\"))\n}) -> tmp\n\n# ▶ 3.rmtrRNA-data/SRR12594201_R1.sam has been processed!\n# ▶ 3.rmtrRNA-data/SRR12594205_R1.sam has been processed!\n# ▶ 3.rmtrRNA-data/SRR12594209_R1.sam has been processed!\n# ...\n\n# remove tmp sam\nfile.remove(list.files(\"3.rmtrRNA-data/\",pattern = \".sam$\",full.names = T))"},{"path":"align-on-genome.html","id":"mapping-info-visualization","chapter":"3 Align on genome","heading":"3.5.1 mapping info visualization","text":"plot_mapinfo allows plot details mapping:plot table:","code":"\n# plot\nmap_info <- list.files(\"3.rmtrRNA-data/\",pattern = \"mapinfo.txt\",full.names = TRUE)\n\n# barplot\nplot_mapinfo(mapinfo_file = map_info,\n             file_name = sapply(strsplit(clean_fq,split = \"\\\\.|/|_\"), \"[\",3))\n# table\nplot_mapinfo(mapinfo_file = map_info,\n             file_name = sapply(strsplit(clean_fq,split = \"\\\\.|/|_\"), \"[\",3),\n             plot_type = \"table\")"},{"path":"align-on-genome.html","id":"map-to-genome","chapter":"3 Align on genome","heading":"3.6 Map to genome","text":"batch_hisat_align uses Rhisat2 align reads genome:Plot mapinfo barplot:Plot table:","code":"\n# ==============================================================================\n# map to genome\n# ==============================================================================\ndir.create(\"4.map-data\")\n\n# batch map to genome\nfq_file1 <- list.files(\"3.rmtrRNA-data/\",pattern = \".fq$\",full.names = T)\noutput_file <- c(\"ribo_nromal_rep1\",\"ribo_700_2h_rep1\",\"ribo_700_2h_r2h_rep1\",\n                 \"ribo_nromal_rep2\",\"ribo_700_2h_rep2\",\"ribo_700_2h_r2h_rep2\",\n                 \"rna_nromal_rep1\",\"rna_700_2h_rep1\",\"rna_700_2h_r2h_rep1\",\n                 \"rna_nromal_rep2\",\"rna_700_2h_rep2\",\"rna_700_2h_r2h_rep2\")\n\nbatch_hisat_align(index = \"0.index-data/ref-index/GRCm38_ref\",\n                  fq_file1 = fq_file1,\n                  output_dir = \"4.map-data/\",\n                  output_file = output_file,\n                  threads = 24,hisat2_params = list(k = 1))\n\n# ▶ ribo_nromal_rep1 has been processed!\n# ▶ ribo_700_2h_rep1 has been processed!\n# ▶ ribo_700_2h_r2h_rep1 has been processed!\n# ...\nmap_info_geome <- list.files(\"4.map-data/\",pattern = \"mapinfo.txt\",full.names = TRUE)\n\n# barplot\nplot_mapinfo(mapinfo_file = map_info_geome,\n             file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2))\n# table\nplot_mapinfo(mapinfo_file = map_info_geome,\n             file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2),\n             plot_type = \"table\")"},{"path":"align-on-genome.html","id":"sam-to-bam","chapter":"3 Align on genome","heading":"3.7 Sam to bam","text":"Covert sam files bam format:","code":"\n# ==============================================================================\n# sam to bam\n# ==============================================================================\ndir.create(\"4.map-data/bam-data\",recursive = TRUE)\n\n# convert sam to bam\nbatch_sam2bam(sam_file = paste(\"4.map-data/\",output_file,\".sam\",sep = \"\"),\n              bam_file = paste(\"4.map-data/bam-data/\",output_file,sep = \"\"))\n\n# [bam_sort_core] merging from 3 files and 1 in-memory blocks...\n# ▶ 4.map-data/ribo_nromal_rep1.sam has been processed!\n#   [bam_sort_core] merging from 1 files and 1 in-memory blocks...\n# ▶ 4.map-data/ribo_700_2h_rep1.sam has been processed!\n#   [bam_sort_core] merging from 2 files and 1 in-memory blocks...\n# ▶ 4.map-data/ribo_700_2h_r2h_rep1.sam has been processed!\n#   [bam_sort_core] merging from 3 files and 1 in-memory blocks...\n# ..."},{"path":"align-on-genome.html","id":"ribo-seq-qc-check","chapter":"3 Align on genome","heading":"3.8 Ribo-seq QC check","text":"","code":""},{"path":"align-on-genome.html","id":"prepare-longest-transcript","chapter":"3 Align on genome","heading":"3.8.1 prepare longest transcript","text":"First prepare longest transcript protein gene gene annotation file:","code":"\ndir.create(\"5.analysis-data\")\n\nsetwd(\"5.analysis-data\")\n# ==============================================================================\n# 1_prepare gene annotation file\n# ==============================================================================\npre_longest_trans_info(gtf_file = \"../Mus_musculus.GRCm38.102.gtf.gz\",\n                       out_file = \"longest_info.txt\")\n# ================================ job finished."},{"path":"align-on-genome.html","id":"prepare-qc-data","chapter":"3 Align on genome","heading":"3.8.2 prepare QC data","text":"pre_qc_data produce QC data ribo-seq sam files:","code":"\n# ==============================================================================\n# 2_prepare Ribo QC data\n# ==============================================================================\nsam_file = list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\",full.names = TRUE)\nsam_file\n# [1] \"../4.map-data/ribo_700_2h_r2h_rep1.sam\" \"../4.map-data/ribo_700_2h_r2h_rep2.sam\"\n# [3] \"../4.map-data/ribo_700_2h_rep1.sam\"     \"../4.map-data/ribo_700_2h_rep2.sam\"\n# [5] \"../4.map-data/ribo_nromal_rep1.sam\"     \"../4.map-data/ribo_nromal_rep2.sam\"\n\nsample_name <- sapply(strsplit(list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\"),\n                               split = \".sam\"), \"[\",1)\nsample_name\n# [1] \"ribo_700_2h_r2h_rep1\" \"ribo_700_2h_r2h_rep2\" \"ribo_700_2h_rep1\"\n# [4] \"ribo_700_2h_rep2\"     \"ribo_nromal_rep1\"     \"ribo_nromal_rep2\"\n\n# run\npre_qc_data(longest_trans_file = \"longest_info.txt\",\n            sam_file = sam_file,\n            out_file = paste(sample_name,\".qc.txt\",sep = \"\"),\n            mapping_type = \"genome\",\n            seq_type = \"singleEnd\")\n# \"Transforming genomic positions into transcriptome positions has been done successfully.\"\n#\n# \"Processing sam files...\"\n#\n# \"../4.map-data/ribo_700_2h_r2h_rep1.sam has been processed.\"\n#\n# \"../4.map-data/ribo_700_2h_r2h_rep2.sam has been processed.\"\n#\n# \"../4.map-data/ribo_700_2h_rep1.sam has been processed.\"\n# ..."},{"path":"align-on-genome.html","id":"load-qc-data","chapter":"3 Align on genome","heading":"3.8.3 load qc data","text":"load_qc_data read qc data R return data frame:","code":"\n# load qc data\nqc_df <- load_qc_data()\n\n# QC input files:\n# ribo_700_2h_r2h_rep1.qc.txt\n# ribo_700_2h_r2h_rep2.qc.txt\n# ribo_700_2h_rep1.qc.txt\n# ribo_700_2h_rep2.qc.txt\n# ribo_nromal_rep1.qc.txt\n# ribo_nromal_rep2.qc.txt\n\n# check\nhead(qc_df,3)\n#   length framest relst framesp relsp feature counts               sample group\n# 1     30       2  1988       1  -118       3      1 ribo_700_2h_r2h_rep1    NA\n# 2     28       1   988       2 -2060       3      1 ribo_700_2h_r2h_rep1    NA\n# 3     25       1  1042       2  -374       3      1 ribo_700_2h_r2h_rep1    NA\n\nqc_df$length <- factor(qc_df$length)\nqc_df$sample <- factor(qc_df$sample,\n                       levels = c(\"ribo_nromal_rep1\",\"ribo_700_2h_rep1\",\"ribo_700_2h_r2h_rep1\",\n                                  \"ribo_nromal_rep2\",\"ribo_700_2h_rep2\",\"ribo_700_2h_r2h_rep2\")\n                       )"},{"path":"align-on-genome.html","id":"qc-visualization","chapter":"3 Align on genome","heading":"3.8.4 qc visualization","text":"Now plot qc data multiple kinds graph, first check length distribution fragments:Frames length distribution:Different region features:frames ratio:Realtive start codon periodicity:can zoom distance:Realtive stop codon periodicity:origin paper’s figure:","code":"\n# length distribution\nqc_plot(qc_data = qc_df,type = \"length\",facet_wrap_list = list(ncol = 3))\n# length with frame\nqc_plot(qc_data = qc_df,type = \"length_frame\",facet_wrap_list = list(ncol = 3))\n# region features\nqc_plot(qc_data = qc_df,type = \"feature\",facet_wrap_list = list(ncol = 3))\n# all frames\nqc_plot(qc_data = qc_df,type = \"frame\",facet_wrap_list = list(ncol = 3))\n# relative to start/stop site 5x10\nrel_to_start_stop(qc_data = qc_df,type = \"relst\",\n                  facet_wrap_list = list(ncol = 3,scales = \"fixed\"))\nrel_to_start_stop(qc_data = qc_df,type = \"relst\",\n                  dist_range = c(-20,60),\n                  facet_wrap_list = list(ncol = 3,scales = \"fixed\"))\nrel_to_start_stop(qc_data = qc_df,type = \"relsp\",\n                  facet_wrap_list = list(ncol = 3,scales = \"fixed\"))"},{"path":"align-on-genome.html","id":"section","chapter":"3 Align on genome","heading":"3.9 ","text":"","code":""},{"path":"align-on-genome.html","id":"calculate-ribo-density-and-rna-coverage","chapter":"3 Align on genome","heading":"3.10 Calculate Ribo density and RNA coverage","text":"step produce ribosome density RNA coverage genomic positions:","code":"\n# ==============================================================================\n# 3_prepare Ribo density and RNA coverage data\n# ==============================================================================\n# calculate Ribo density\npre_ribo_density_data(sam_file = sam_file,\n                      out_file = paste(sample_name,\".density.txt\",sep = \"\"))\n\n# ../4.map-data/ribo_700_2h_r2h_rep1.sam has been processed!\n# ../4.map-data/ribo_700_2h_r2h_rep2.sam has been processed!\n# ../4.map-data/ribo_700_2h_rep1.sam has been processed!\n# ../4.map-data/ribo_700_2h_rep2.sam has been processed!\n# ../4.map-data/ribo_nromal_rep1.sam has been processed!\n# ../4.map-data/ribo_nromal_rep2.sam has been processed!\n# NULL\n\n# calculate RNA coverage\nbam_file_rna = list.files(\"../4.map-data/bam-data/\",pattern = \"^rna.*bam$\",full.names = TRUE)\nbam_file_rna\n# [1] \"../4.map-data/bam-data/rna_700_2h_r2h_rep1.bam\" \"../4.map-data/bam-data/rna_700_2h_r2h_rep2.bam\"\n# [3] \"../4.map-data/bam-data/rna_700_2h_rep1.bam\"     \"../4.map-data/bam-data/rna_700_2h_rep2.bam\"\n# [5] \"../4.map-data/bam-data/rna_nromal_rep1.bam\"     \"../4.map-data/bam-data/rna_nromal_rep2.bam\"\n\nsample_name_rna <- sapply(strsplit(list.files(\"../4.map-data/bam-data/\",pattern = \"^rna.*bam$\"),\n                               split = \".bam\"), \"[\",1)\nsample_name_rna\n# [1] \"rna_700_2h_r2h_rep1\" \"rna_700_2h_r2h_rep2\" \"rna_700_2h_rep1\"     \"rna_700_2h_rep2\"\n# [5] \"rna_nromal_rep1\"     \"rna_nromal_rep2\"\n\npre_rna_coverage_data(bam_file = bam_file_rna,\n                      out_file = paste(sample_name_rna,\".coverage.txt\",sep = \"\"))\n\n# ../4.map-data/bam-data/rna_700_2h_r2h_rep1.bam has been processed!\n# ../4.map-data/bam-data/rna_700_2h_r2h_rep2.bam has been processed!\n# ../4.map-data/bam-data/rna_700_2h_rep1.bam has been processed!\n# ../4.map-data/bam-data/rna_700_2h_rep2.bam has been processed!\n# ../4.map-data/bam-data/rna_nromal_rep1.bam has been processed!\n# ../4.map-data/bam-data/rna_nromal_rep2.bam has been processed!"},{"path":"align-on-genome.html","id":"coordinate-transformation","chapter":"3 Align on genome","heading":"3.11 Coordinate transformation","text":"Now need transform genomic coordinates transcriptomic coordinates according \nlongest transcript file prepared :","code":"\n# ==============================================================================\n# 4_transform genomic coordinate into transcriotomic coordinate\n# ==============================================================================\npre_gene_trans_density(gene_anno = \"longest_info.txt\",\n                       density_file = c(paste(sample_name,\".density.txt\",sep = \"\"),\n                                        paste(sample_name_rna,\".coverage.txt\",sep = \"\")),\n                       out_file = c(paste(sample_name,\".trans.txt\",sep = \"\"),\n                                    paste(sample_name_rna,\".trans.txt\",sep = \"\")))\n\n# 2.density-data/ribo_700_2h_r2h_rep1.density.txt  has been processed!\n# 2.density-data/ribo_700_2h_r2h_rep2.density.txt  has been processed!\n# ..."},{"path":"align-on-genome.html","id":"track-plot","chapter":"3 Align on genome","heading":"3.12 Track plot","text":"ribo density RNA coverage files, can use load_track_data load data \ntrack_plot visualize data:","code":""},{"path":"align-on-genome.html","id":"load-track-data","chapter":"3 Align on genome","heading":"3.12.1 load track data","text":"","code":"\n# ==============================================================================\n# 5_load denisty and coverage data for specific gene\n# ==============================================================================\ntrack_df <- load_track_data(ribo_file = paste(sample_name,\".trans.txt\",sep = \"\"),\n                            rna_file = paste(sample_name_rna,\".trans.txt\",sep = \"\"),\n                            sample_name = paste(rep(c(\"700_2h_r2h\",\"700_2h\",\"normal\"),each = 2),\n                                                c(\"_rep1\",\"_rep2\"),sep = \"\"),\n                            gene_list = c(\"Ndufb3\",\"Ndufb6\",\"Rps7\",\"Uqcrfs1\",\"Ndufv1\",\"Sat1\"))\n\n# check\nhead(track_df,3)\n#   gene_name           trans_id transpos density type     sample\n# 1    Ndufb3 ENSMUST00000027193        1       0 ribo 700_2h_r2h\n# 2    Ndufb3 ENSMUST00000027193        2       0 ribo 700_2h_r2h\n# 3    Ndufb3 ENSMUST00000027193        3       0 ribo 700_2h_r2h"},{"path":"align-on-genome.html","id":"plot-tracks","chapter":"3 Align on genome","heading":"3.12.2 plot tracks","text":"can reverse RNA coverage track:Sometimes range RNA coverage much ribo density, can use rna_signal_scale rescale RNA coverage range:reversed RNA track rescaled coverage:show_ribo_only can setted show ribo tracks:","code":"\n# 6x12\ntrack_plot(signal_data = track_df,\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           range_pos = c(0.75,0.1))\ntrack_plot(signal_data = track_df,\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           reverse_rna = F,\n           signal_col = c(\"ribo\" = \"red\",\"rna\" = \"grey80\"))\ntrack_plot(signal_data = track_df,\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           reverse_rna = F,\n           signal_col = c(\"ribo\" = \"red\",\"rna\" = \"grey80\"),\n           rna_signal_scale = 0.1)\ntrack_plot(signal_data = track_df,\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           signal_col = c(\"ribo\" = \"red\",\"rna\" = \"grey80\"),\n           rna_signal_scale = 0.1)\ntrack_plot(signal_data = track_df,\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           show_ribo_only = T)"},{"path":"align-on-genome.html","id":"quantification","chapter":"3 Align on genome","heading":"3.13 Quantification","text":"can use Rsubread featureCounts function get count matrix:can related analysis tools based matrix data.","code":"\nlibrary(Rsubread)\n\nexp <- featureCounts(files = list.files(\"../4.map-data/bam-data/\",pattern = \".bam$\",full.names = T),\n                     annot.ext = \"../Mus_musculus.GRCm38.102.gtf.gz\",\n                     isGTFAnnotationFile = T,\n                     GTF.featureType = \"exon\",\n                     GTF.attrType = \"gene_id\",\n                     GTF.attrType.extra = c(\"gene_name\",\"gene_biotype\"),\n                     isPairedEnd = FALSE,\n                     nthreads = 12)\n\ncounts <- exp$counts\nhead(counts[1:3,1:3])\n#                    ribo_700_2h_r2h_rep1.bam ribo_700_2h_r2h_rep2.bam ribo_700_2h_rep1.bam\n# ENSMUSG00000102693                        0                        0                    0\n# ENSMUSG00000064842                        0                        2                    0\n# ENSMUSG00000051951                        0                        0                    0\n\ntpm <- count_to_tpm(fc_obj = exp)\nhead(tpm[1:3,1:3])\n#              gene_id ribo_700_2h_r2h_rep1.bam ribo_700_2h_r2h_rep2.bam\n# 1 ENSMUSG00000000001                 35.70944                 35.37493\n# 2 ENSMUSG00000000003                  0.00000                  0.00000\n# 3 ENSMUSG00000000028                 11.93136                 11.52324"},{"path":"align-on-transcriptome.html","id":"align-on-transcriptome","chapter":"4 Align on transcriptome","heading":"4 Align on transcriptome","text":"chapter describe total ribo-seq workflow aligning reads transcriptome. test dataset also GSE157519(Adaptive translational pausing hallmark cellular response severe environmental stress).directly use clean fastq files removed rRNA tRNA former chapter.","code":""},{"path":"align-on-transcriptome.html","id":"extract-longest-transcript-sequence","chapter":"4 Align on transcriptome","heading":"4.1 Extract longest transcript sequence","text":"need extract longest transcript sequence index :","code":"\n# ==============================================================================\n# extract longest transcript fasta\n# ==============================================================================\nlibrary(BioSeqUtils)\nlibrary(dplyr)\n\n# make object\nmytest <- loadGenomeGTF(gtfPath = \"Mus_musculus.GRCm38.102.gtf.gz\",filterProtein = T)\n\n# all gene\ngene <- unique(mytest@gtf$gene_name)\n\n# get transcript info\nrt <- getTransInfo(object = mytest,geneName = gene,\n                   selecType = \"lcds\",topN = 1)\n\n# add id\nrt <- rt %>% \n  mutate(seq_id = paste(gene_name,gene_id,transcript_id,\n                        `5UTR` + 1,`5UTR` + CDS,exon,sep = \"|\"))\n\n# using python code\nsystem.time(pyExtractSeq(gtf_file = \"Mus_musculus.GRCm38.102.gtf.gz\",\n                         genome_file = \"Mus_musculus.GRCm38.dna.primary_assembly.fa\",\n                         transcript_id = rt$transcript_id,\n                         new_id = rt$seq_id,\n                         type = \"exon\",\n                         out_file = \"GRCm38_longest_transcript.fasta\"))\n\n# check\nsystem(\"head GRCm38_longest_transcript.fasta\")\n# >0610009B22Rik|ENSMUSG00000007777|ENSMUST00000109098|209|628|892\n# GCAGCCTTGCTCAGAGACGCATGTGCGCATGCCCGGTCGACTGAGCTGCCCTGATCCAAGATGGCGGCCGGACCGGGGCT\n# GGGGACGGGCTTAGCGCGTTACTGAGCATGCTCAGTCTTCCGTCACTTGCGTCAGGTCGGCAGCCGGCGCAGGCCGCTCA\n# GTCCTTCCCGGAGAGGCGGGAACATGAGCCACATATAGACAGAAGACAATGTCTGGGAGCTTCTACTTCGTAATTGTTGG\n# CCACCATGATAATCCGGTTTTTGAAATGGAATTTTTGCCAGCTGGGAAAGCAGAATCTAAAGATGAACACCGTCATCTGA\n# ACCAGTTCATAGCTCATGCTGCTCTGGACCTCGTCGACGAAAACATGTGGCTCTCCAACAACATGTACTTAAAAACTGTG\n# GACAAATTCAATGAGTGGTTCGTCTCGGCGTTCGTCACGGCTGGGCACATGCGGCTCATCATGCTGCATGACGTGAGGCA\n# CGAGGATGGCATCAAGAACTTCTTCACTGACGTCTACGACTTATACATCAAATTTGCCATGAATCCCTTTTATGAACCCA\n# ATTCTCCTATTCGATCGAGTGCATTCGAAAGAAAAGTTCAGTTTCTTGGGAAGAAACATCTTTTAAACTAAATGCAGAAA\n# AACTTCAGAATCACAGTGGGGTGTGCTCAGCAGTGGATGTATTGTAAATTACTTGATAAAGTAGCCTAGCAAACTCTTTA\n# [1] 0"},{"path":"align-on-transcriptome.html","id":"build-index-for-transcriptome","chapter":"4 Align on transcriptome","heading":"4.2 Build index for transcriptome","text":"buid index longest transcript fasta:","code":"\n# ==============================================================================\n# build index\n# ==============================================================================\nreference_index_build(reference_file = \"GRCm38_longest_transcript.fasta\",\n                      prefix = \"GRCm38_ref\",\n                      threads = 24)\n# ┌────────────────────────────────────────────────┐\n# │                                                │\n# │   Building index for reference has finished!   │\n# │                                                │\n# └────────────────────────────────────────────────┘"},{"path":"align-on-transcriptome.html","id":"remove-rrna-and-trna-contamination-1","chapter":"4 Align on transcriptome","heading":"4.3 Remove rRNA and tRNA contamination","text":"done mapping genome chapter, skip step.","code":""},{"path":"align-on-transcriptome.html","id":"map-to-transcriptome","chapter":"4 Align on transcriptome","heading":"4.4 Map to transcriptome","text":"Plot mapinfo barplot:Plot table:","code":"\n# ==============================================================================\n# map to genome\n# ==============================================================================\ndir.create(\"4.map-data\")\n\n# batch map to genome\nfq_file1 <- list.files(\"../1.mapping_to_genome/3.rmtrRNA-data/\",pattern = \".fq\",full.names = T)\noutput_file <- output_file <- c(\"ribo_nromal_rep1\",\"ribo_700_2h_rep1\",\"ribo_700_2h_r2h_rep1\",\n                                \"ribo_nromal_rep2\",\"ribo_700_2h_rep2\",\"ribo_700_2h_r2h_rep2\",\n                                \"rna_nromal_rep1\",\"rna_700_2h_rep1\",\"rna_700_2h_r2h_rep1\",\n                                \"rna_nromal_rep2\",\"rna_700_2h_rep2\",\"rna_700_2h_r2h_rep2\")\n\nbatch_hisat_align(index = \"0.index-data/ref-index/GRCm38_ref\",\n                  fq_file1 = fq_file1,\n                  output_dir = \"4.map-data/\",\n                  output_file = output_file,\n                  threads = 24,hisat2_params = list(k = 1))\n\n# ▶ ribo_nromal_rep1 has been processed!\n# ▶ ribo_700_2h_rep1 has been processed!\n# ▶ ribo_700_2h_r2h_rep1 has been processed!\n# ▶ ribo_nromal_rep2 has been processed!\n# ▶ ribo_700_2h_rep2 has been processed!\n# ▶ ribo_700_2h_r2h_rep2 has been processed!\n# ...\n# plot mapping info\nmap_info_geome <- list.files(\"4.map-data/\",pattern = \"mapinfo.txt\",full.names = TRUE)\n\nplot_mapinfo(mapinfo_file = map_info_geome,\n             file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2))\nplot_mapinfo(mapinfo_file = map_info_geome,\n             file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2),\n             plot_type = \"table\")"},{"path":"align-on-transcriptome.html","id":"sam-to-bam-1","chapter":"4 Align on transcriptome","heading":"4.5 Sam to bam","text":"Covert sam files bam format:","code":"\n# ==============================================================================\n# sam to bam\n# ==============================================================================\ndir.create(\"4.map-data/bam-data\",recursive = TRUE)\n\n# convert sam to bam\nbatch_sam2bam(sam_file = paste(\"4.map-data/\",output_file,\".sam\",sep = \"\"),\n              bam_file = paste(\"4.map-data/bam-data/\",output_file,sep = \"\"))\n# ▶ 4.map-data/rna_nromal_rep1.sam has been processed!\n# [bam_sort_core] merging from 12 files and 1 in-memory blocks...\n# ▶ 4.map-data/rna_700_2h_rep1.sam has been processed!\n# [bam_sort_core] merging from 17 files and 1 in-memory blocks...\n# ▶ 4.map-data/rna_700_2h_r2h_rep1.sam has been processed!\n# [bam_sort_core] merging from 21 files and 1 in-memory blocks...\n# ..."},{"path":"align-on-transcriptome.html","id":"ribo-seq-qc-check-1","chapter":"4 Align on transcriptome","heading":"4.6 Ribo-seq QC check","text":"","code":""},{"path":"align-on-transcriptome.html","id":"prepare-longest-transcript-1","chapter":"4 Align on transcriptome","heading":"4.6.1 prepare longest transcript","text":"First prepare longest transcript protein gene gene annotation file:","code":"\ndir.create(\"5.analysis-data\")\n\nsetwd(\"5.analysis-data\")\n# ==============================================================================\n# 1_prepare gene annotation file\n# ==============================================================================\npre_longest_trans_info(gtf_file = \"../Mus_musculus.GRCm38.102.gtf.gz\",\n                       out_file = \"longest_info.txt\")\n# ================================ job finished."},{"path":"align-on-transcriptome.html","id":"prepare-qc-data-1","chapter":"4 Align on transcriptome","heading":"4.6.2 prepare QC data","text":"pre_qc_data produce QC data ribo-seq sam files:","code":"\n# ==============================================================================\n# 2_prepare Ribo QC data\n# ==============================================================================\nsam_file = list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\",full.names = TRUE)\nsam_file\n# [1] \"../4.map-data/ribo_700_2h_r2h_rep1.sam\" \"../4.map-data/ribo_700_2h_r2h_rep2.sam\"\n# [3] \"../4.map-data/ribo_700_2h_rep1.sam\"     \"../4.map-data/ribo_700_2h_rep2.sam\"\n# [5] \"../4.map-data/ribo_nromal_rep1.sam\"     \"../4.map-data/ribo_nromal_rep2.sam\"\n\nsample_name <- sapply(strsplit(list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\"),\n                               split = \".sam\"), \"[\",1)\nsample_name\n# [1] \"ribo_700_2h_r2h_rep1\" \"ribo_700_2h_r2h_rep2\" \"ribo_700_2h_rep1\"\n# [4] \"ribo_700_2h_rep2\"     \"ribo_nromal_rep1\"     \"ribo_nromal_rep2\"\n\n# run\npre_qc_data(sam_file = sam_file,\n            out_file = paste(sample_name,\".qc.txt\",sep = \"\"),\n            mapping_type = \"transcriptome\",\n            seq_type = \"singleEnd\")\n# ../4.map-data/ribo_700_2h_r2h_rep1.sam has been processed!\n# ../4.map-data/ribo_700_2h_r2h_rep2.sam has been processed!\n# ../4.map-data/ribo_700_2h_rep1.sam has been processed!\n# ..."},{"path":"align-on-transcriptome.html","id":"load-qc-data-1","chapter":"4 Align on transcriptome","heading":"4.6.3 load qc data","text":"load_qc_data read qc data R return data frame:","code":"\n# load qc data\nqc_df <- load_qc_data()\nqc_df <- qc_df |> dplyr::filter(length >= 20 & length <= 35)\n\n# QC input files:\n# ribo_700_2h_r2h_rep1.qc.txt\n# ribo_700_2h_r2h_rep2.qc.txt\n# ribo_700_2h_rep1.qc.txt\n# ribo_700_2h_rep2.qc.txt\n# ribo_nromal_rep1.qc.txt\n# ribo_nromal_rep2.qc.txt\n\n# check\nhead(qc_df,3)\n#   length framest relst framesp relsp feature counts               sample group\n# 1     27       0   825       0  -168       3      1 ribo_700_2h_r2h_rep1    NA\n# 2     30       2  1916       1  -694       3      1 ribo_700_2h_r2h_rep1    NA\n# 3     30       0  1401       0   -21       3      7 ribo_700_2h_r2h_rep1    NA\n\nqc_df$length <- factor(qc_df$length)\nqc_df$sample <- factor(qc_df$sample,\n                       levels = c(\"ribo_nromal_rep1\",\"ribo_700_2h_rep1\",\"ribo_700_2h_r2h_rep1\",\n                                  \"ribo_nromal_rep2\",\"ribo_700_2h_rep2\",\"ribo_700_2h_r2h_rep2\"))"},{"path":"align-on-transcriptome.html","id":"qc-visualization-1","chapter":"4 Align on transcriptome","heading":"4.6.4 qc visualization","text":"Now plot qc data multiple kinds graph, first check length distribution fragments:Frames length distribution:Different region features:frames ratio:Realtive start codon periodicity:Realtive stop codon periodicity:","code":"\n# length distribution\nqc_plot(qc_data = qc_df,type = \"length\",facet_wrap_list = list(ncol = 3))\n# length with frame\nqc_plot(qc_data = qc_df,type = \"length_frame\",facet_wrap_list = list(ncol = 3))\n# region features\nqc_plot(qc_data = qc_df,type = \"feature\",facet_wrap_list = list(ncol = 3))\n# all frames\nqc_plot(qc_data = qc_df,type = \"frame\",facet_wrap_list = list(ncol = 3))\n# relative to start/stop site 5x10\nrel_to_start_stop(qc_data = qc_df,type = \"relst\",\n                  facet_wrap_list = list(ncol = 3,scales = \"fixed\"))\nrel_to_start_stop(qc_data = qc_df,type = \"relsp\",\n                  facet_wrap_list = list(ncol = 3,scales = \"fixed\"))"},{"path":"align-on-transcriptome.html","id":"section-1","chapter":"4 Align on transcriptome","heading":"4.7 ","text":"","code":""},{"path":"align-on-transcriptome.html","id":"calculate-ribo-density-and-rna-coverage-1","chapter":"4 Align on transcriptome","heading":"4.8 Calculate Ribo density and RNA coverage","text":"","code":"\n# ==============================================================================\n# 3_prepare Ribo density and RNA coverage data\n# ==============================================================================\n# calculate Ribo density\npre_ribo_density_data(sam_file = sam_file,\n                      out_file = paste(sample_name,\".density.txt\",sep = \"\"),\n                      mapping_type = \"transcriptome\")\n\n# ../4.map-data/ribo_700_2h_r2h_rep1.sam has been processed!\n# ../4.map-data/ribo_700_2h_r2h_rep2.sam has been processed!\n# ../4.map-data/ribo_700_2h_rep1.sam has been processed!\n# ...\n\n# calculate RNA coverage\nbam_file_rna = list.files(\"../4.map-data/bam-data\",pattern = \"^rna.*bam$\",full.names = TRUE)\nbam_file_rna\n# [1] \"../4.map-data/bam-data/rna_700_2h_r2h_rep1.bam\" \"../4.map-data/bam-data/rna_700_2h_r2h_rep2.bam\"\n# [3] \"../4.map-data/bam-data/rna_700_2h_rep1.bam\"     \"../4.map-data/bam-data/rna_700_2h_rep2.bam\"    \n# [5] \"../4.map-data/bam-data/rna_nromal_rep1.bam\"     \"../4.map-data/bam-data/rna_nromal_rep2.bam\"    \n\nsample_name_rna <- sapply(strsplit(list.files(\"../4.map-data/bam-data\",pattern = \"^rna.*bam$\"),\n                                   split = \".bam\"), \"[\",1)\nsample_name_rna\n# [1] \"rna_700_2h_r2h_rep1\" \"rna_700_2h_r2h_rep2\" \"rna_700_2h_rep1\"     \"rna_700_2h_rep2\"\n# [5] \"rna_nromal_rep1\"     \"rna_nromal_rep2\"\n\npre_rna_coverage_data(bam_file = bam_file_rna,\n                      out_file = paste(sample_name_rna,\".coverage.txt\",sep = \"\")\n                      )\n# ../4.map-data/bam-data/rna_700_2h_r2h_rep1.bam has been processed!                                                                   \n# ../4.map-data/bam-data/rna_700_2h_r2h_rep2.bam has been processed!                                                                   \n# ../4.map-data/bam-data/rna_700_2h_rep1.bam has been processed!\n# ..."},{"path":"align-on-transcriptome.html","id":"track-plot-1","chapter":"4 Align on transcriptome","heading":"4.9 Track plot","text":"","code":""},{"path":"align-on-transcriptome.html","id":"load-track-data-1","chapter":"4 Align on transcriptome","heading":"4.9.1 load track data","text":"","code":"\n# ==============================================================================\n# 5_load denisty and coverage data for specific gene\n# ==============================================================================\ntrack_df <- load_track_data(ribo_file = paste(sample_name,\".density.txt\",sep = \"\"),\n                            rna_file = paste(sample_name_rna,\".coverage.txt\",sep = \"\"),\n                            sample_name = paste(rep(c(\"700_2h_r2h\",\"700_2h\",\"normal\"),each = 2),\n                                                c(\"_rep1\",\"_rep2\"),sep = \"\"),\n                            gene_list = c(\"Ndufb3\",\"Ndufb6\",\"Rps7\",\"Uqcrfs1\",\"Ndufv1\",\"Sat1\"),\n                            mapping_type = \"transcriptome\")\n\n# check\nhead(track_df,3)\n#   gene_name           trans_id transpos   density type          sample\n# 1    Ndufb3 ENSMUST00000027193      100 0.0528252 ribo 700_2h_r2h_rep1\n# 2    Ndufb3 ENSMUST00000027193      102 0.0528252 ribo 700_2h_r2h_rep1\n# 3    Ndufb3 ENSMUST00000027193      103 0.0528252 ribo 700_2h_r2h_rep1"},{"path":"align-on-transcriptome.html","id":"plot-tracks-1","chapter":"4 Align on transcriptome","heading":"4.9.2 plot tracks","text":"Reverse RNA coverage track:Another three genes:show ribo tracks:","code":"\n# 6x12\ntrack_plot(signal_data = track_df |> dplyr::filter(gene_name %in% c(\"Ndufb3\",\"Ndufb6\",\"Rps7\")),\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T)\n# reverse RNA track\ntrack_plot(signal_data = track_df |> dplyr::filter(gene_name %in% c(\"Ndufb3\",\"Ndufb6\",\"Rps7\")),\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           reverse_rna = F)\ntrack_plot(signal_data = track_df |> dplyr::filter(gene_name %in% c(\"Uqcrfs1\",\"Ndufv1\",\"Sat1\")),\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T)\ntrack_plot(signal_data = track_df |> dplyr::filter(gene_name %in% c(\"Uqcrfs1\",\"Ndufv1\",\"Sat1\")),\n           gene_anno = \"longest_info.txt\",\n           sample_order = c(\"normal_rep1\",\"normal_rep2\",\"700_2h_rep1\",\"700_2h_rep2\",\n                            \"700_2h_r2h_rep1\",\"700_2h_r2h_rep2\"),\n           remove_trans_panel_border = T,\n           show_ribo_only = T)"},{"path":"align-on-transcriptome.html","id":"metagene-plot","chapter":"4 Align on transcriptome","heading":"4.10 Metagene plot","text":"Metagene plot shows average ribosome density relative start/stop codon:Plot:","code":"\n# ==============================================================================\n# 7_metagene plot\n# ==============================================================================\n# prepare data\npre_metagene_data(density_file = paste(sample_name[c(1,3,5)],\".density.txt\",sep = \"\"),\n                  out_file = paste(sample_name[c(1,3,5)],\".meta.txt\",sep = \"\"),\n                  mapping_type = \"transcriptome\")\n# 2.density-data/ribo_700_2h_r2h_rep1.density.txt  has been processed!\n# 2.density-data/ribo_700_2h_rep1.density.txt  has been processed!\n# 2.density-data/ribo_nromal_rep1.density.txt  has been processed!\n  \n\npre_metagene_data(density_file = paste(sample_name[c(1,3,5)],\".density.txt\",sep = \"\"),\n                  out_file = paste(sample_name[c(1,3,5)],\".sp.meta.txt\",sep = \"\"),\n                  mapping_type = \"transcriptome\",\n                  mode = \"sp\")\n\n# rel2sp\npre_metagene_data(density_file = paste(sample_name[c(1,3,5)],\".density.txt\",sep = \"\"),\n                  out_file = paste(sample_name[c(1,3,5)],\".sp.meta.txt\",sep = \"\"),\n                  mapping_type = \"transcriptome\",\n                  mode = \"sp\")\n\n# load data\nmeta_df <- load_metagene_data()\n# MetaGene input files: \n# ribo_700_2h_r2h_rep1.meta.txt\n# ribo_700_2h_r2h_rep1.sp.meta.txt\n# ribo_700_2h_rep1.meta.txt\n# ribo_700_2h_rep1.sp.meta.txt\n# ribo_nromal_rep1.meta.txt\n# ribo_nromal_rep1.sp.meta.txt\n\nmeta_df$group <- rep(rep(c(\"st\",\"sp\"),each = 518),3)\n# plot\nlibrary(ggplot2)\n\nmeta_df$sample <- factor(meta_df$sample,levels = c(\"ribo_nromal_rep1\",\"ribo_700_2h_rep1\",\n                                                   \"ribo_700_2h_r2h_rep1\"))\n\nggplot(meta_df) +\n  geom_line(aes(x = pos,y = density,color = sample),linewidth = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_bw() +\n  jj_theme() +\n  ggh4x::facet_grid2(group~sample,scales = \"free\",independent = \"x\")"},{"path":"align-on-transcriptome.html","id":"quantification-1","chapter":"4 Align on transcriptome","heading":"4.11 Quantification","text":"pre_count_tpm_data calculate genes count tpm sam files:load_expression_data extract count tpm matrix files:","code":"\n# for Ribo\nsam_file = list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\",full.names = TRUE)\nsample_name <- sapply(strsplit(list.files(\"../4.map-data/\",pattern = \"^ribo.*sam$\"),\n                               split = \".sam\"), \"[\",1)\n\n# get expression matrix\npre_count_tpm_data(sam_file = sam_file,\n                   out_file = paste(sample_name,\".exp.txt\",sep = \"\"),\n                   type = \"ribo\")\n# ../4.map-data/ribo_700_2h_r2h_rep1.sam has been processed!\n# ../4.map-data/ribo_700_2h_r2h_rep2.sam has been processed!\n# ../4.map-data/ribo_700_2h_rep1.sam has been processed!\n# ...\n\n# for RNA\nsam_file = list.files(\"../4.map-data/\",pattern = \"^rna.*sam$\",full.names = TRUE)\nsample_name <- sapply(strsplit(list.files(\"../4.map-data/\",pattern = \"^rna.*sam$\"),\n                               split = \".sam\"), \"[\",1)\n\n# get expression matrix\npre_count_tpm_data(sam_file = sam_file,\n                   out_file = paste(sample_name,\".exp.txt\",sep = \"\"),\n                   type = \"rna\")\n# ../4.map-data/rna_700_2h_r2h_rep1.sam has been processed!\n# ../4.map-data/rna_700_2h_r2h_rep2.sam has been processed!\n# ../4.map-data/rna_700_2h_rep1.sam has been processed!\n# ...\n# prepare matrix\nexp <- load_expression_data()\n# Expression input files: \n# ribo_700_2h_r2h_rep1.exp.txt\n# ribo_700_2h_r2h_rep2.exp.txt\n# ribo_700_2h_rep1.exp.txt\n# ribo_700_2h_rep2.exp.txt\n# ribo_nromal_rep1.exp.txt\n# ribo_nromal_rep2.exp.txt\n# rna_700_2h_r2h_rep1.exp.txt\n# rna_700_2h_r2h_rep2.exp.txt\n# rna_700_2h_rep1.exp.txt\n# rna_700_2h_rep2.exp.txt\n# rna_nromal_rep1.exp.txt\n# rna_nromal_rep2.exp.txt\n\nhead(exp$count_matrix[1:3,1:4])\n#        gene_name ribo_700_2h_r2h_rep1 ribo_700_2h_r2h_rep2 ribo_700_2h_rep1\n# 1: 0610009B22Rik                  126                  124               39\n# 2: 0610010F05Rik                   81                   70                5\n# 3: 0610010K14Rik                   65                   64                2\n\nhead(exp$tpm_matrix[1:3,1:4])\n#        gene_name ribo_700_2h_r2h_rep1 ribo_700_2h_r2h_rep2 ribo_700_2h_rep1\n# 1: 0610009B22Rik            51.687154             51.39426        70.832450\n# 2: 0610010F05Rik             6.478891              5.65711         1.770685\n# 3: 0610010K14Rik            19.544299             19.44319         2.662517"},{"path":"selective-ribosome-profiling.html","id":"selective-ribosome-profiling","chapter":"5 Selective ribosome profiling","heading":"5 Selective ribosome profiling","text":"selective ribosome profiling (SeRP) method new tool studying co-translational activity maturation factors provides proteome-wide information factor’s nascent interactome, onset duration binding mechanisms controlling factor engagement. SeRP based combination two ribosome-profiling (RP) experiments, sequencing ribosome-protected mRNA fragments ribosomes (total translatome) ribosome subpopulation engaged factor interest (factor-bound translatome).details see Selective ribosome profiling study interactions translating ribosomes yeast.Schematic overview SeRP:Analysis eukaryotic selective RP data:","code":""},{"path":"serp-data-analysis.html","id":"serp-data-analysis","chapter":"6 SeRP data analysis","heading":"6 SeRP data analysis","text":"","code":""},{"path":"serp-data-analysis.html","id":"introduction","chapter":"6 SeRP data analysis","heading":"6.1 Introduction","text":"show entire example analysis SeRP data Cotranslational assembly protein complexes \neukaryotes revealed ribosome profiling related\nGSE number GSE116570. can download raw fastq files ways.shows simple data processing describtion:","code":""},{"path":"serp-data-analysis.html","id":"extract-yeast-longest-transcript-sequence","chapter":"6 SeRP data analysis","heading":"6.2 Extract yeast longest transcript sequence","text":"Condidering transcripts UTRs(untranslated regions) Saccharomyces cerevisiae.extend 50 bases upstream downstream transcript. choose map reads transcriptome. Now\nuse BioSeqUtils extract fasta:","code":"\nlibrary(BioSeqUtils)\nlibrary(RiboProfiler)\n\n# ==============================================================================\n# get longest transcript\n# ==============================================================================\n# make object\nmytest <- loadGenomeGTF(gtfPath = \"Saccharomyces_cerevisiae.R64-1-1.105.gtf\",\n                        genomePath = \"Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa\",\n                        filterProtein = T)\n## GenomeGTF object for Extracting sequences.\n## GTF file is loaded.\n## genome file is loaded.\n## representTrans file is NULL.\n## intron slot is NULL.\n\n# select all genes\ngene <- unique(mytest@gtf$gene_name)\n\n# return all transcript info\nall <- getTransInfo(object = mytest,geneName = gene,selecType = \"lcds\",topN = 1)\n\n# extend sequence\nextend <- getFeatureFromGenome(mytest,geneName = all$gene_name,\n                               type = \"exon\",\n                               up.extend = 50,\n                               dn.extend = 50)\n\n# output\nBiostrings::writeXStringSet(extend,filepath = \"sac_longest_trans.fa\",format = \"fasta\")\n\n# check\nsystem(\"head sac_longest_trans.fa\")\n# >AAC1|YMR056C|YMR056C_mRNA|51|978|1030|CD\n# CAGATTCTCGTATCTGTTATTCTTTTCTATTTTTCCTTTTTACAGCAGTAATGTCTCACACAGAAACACAGACTCAGCAG\n# TCACACTTCGGTGTGGACTTCCTTATGGGCGGCGTTTCTGCTGCCATTGCGAAGACGGGTGCCGCTCCCATTGAACGGGT\n# GAAACTGTTGATGCAGAATCAAGAAGAGATGCTTAAACAGGGCTCGTTGGATACACGGTACAAGGGAATTTTAGATTGCT\n# TCAAGAGGACTGCGACTCATGAAGGTATTGTGTCGTTCTGGAGGGGTAACACCGCCAATGTTCTCCGGTATTTCCCCACG\n# CAGGCGCTGAATTTTGCCTTCAAAGACAAAATTAAGTCGTTGTTGAGTTACGACAGAGAGCGCGATGGGTATGCCAAGTG\n# GTTTGCTGGAAATCTTTTCTCTGGTGGAGCGGCTGGTGGTTTGTCGCTTCTATTTGTATATTCCTTGGACTACGCAAGGA\n# CGCGGCTTGCAGCGGATGCTAGGGGTTCTAAGTCAACCTCGCAAAGACAGTTTAATGGATTGCTAGACGTGTATAAGAAG\n# ACACTGAAAACGGACGGGTTGTTGGGTCTGTACCGTGGGTTTGTGCCCTCAGTTCTGGGTATCATTGTCTACAGAGGTCT\n# GTACTTTGGCTTGTACGATTCTTTCAAGCCTGTGCTGTTGACGGGGGCTCTAGAGGGGTCCTTTGTTGCCTCTTTCCTAT\n# [1] 0"},{"path":"serp-data-analysis.html","id":"build-index-for-trna-rrna-and-reference","chapter":"6 SeRP data analysis","heading":"6.3 Build index for tRNA, rRNA and reference","text":"","code":"\n# ==============================================================================\n# build index\n# ==============================================================================\n\n# download mouse rRNA and tRNA\nfetch_trRNA_from_NCBI(species = \"Saccharomyces cerevisiae\")\n# ┌──────────────────────────────────────────────────────────────┐\n# │                                                              │\n# │   Download tRNA and rRNA sequences from NCBI has finished!   │\n# │                                                              │\n# └──────────────────────────────────────────────────────────────┘\n\n# build index\ntrRNA_index_build(trRNA_file = \"Saccharomyces_cerevisiae_trRNA.fa\",\n                  prefix = \"sac_trRNA\")\n# ┌────────────────────────────────────────────────────┐\n# │                                                    │\n# │   Building index for tRNA and rRNA has finished!   │\n# │                                                    │\n# └────────────────────────────────────────────────────┘\n\nreference_index_build(reference_file = \"sac_longest_trans.fa\",\n                      prefix = \"sac_ref\",\n                      threads = 24)\n# ┌────────────────────────────────────────────────┐\n# │                                                │\n# │   Building index for reference has finished!   │\n# │                                                │\n# └────────────────────────────────────────────────┘"},{"path":"serp-data-analysis.html","id":"trim-adapters-for-raw-fastqs","chapter":"6 SeRP data analysis","heading":"6.4 Trim adapters for raw fastqs","text":"","code":"\n# ==============================================================================\n# trim adaptors\n# ==============================================================================\ndir.create(\"2.trim-data\")\n\n# raw fastq files\nfq <- list.files(path = \"1.raw-data/\",pattern = \".gz$\",full.names = T)\n\nrmd1 <- batch_adpator_remove(fastq_file1 = fq,\n                             output_dir = \"2.trim-data/\",\n                             output_name = sapply(strsplit(fq,split = \"\\\\.|/\"), \"[\",3),\n                             fastp_params = list(minReadLength = 20,\n                                                 maxReadLength = 35,\n                                                 adapterSequenceRead1 = \"CTGTAGGCACCATCAATTCGTATGCCGTCTT\",\n                                                 thread = 16))"},{"path":"serp-data-analysis.html","id":"remove-trna-and-rrna","chapter":"6 SeRP data analysis","heading":"6.5 Remove tRNA and rRNA","text":"","code":"\n# ==============================================================================\n# remove trRNA sequence\n# ==============================================================================\ndir.create(\"3.rmtrRNA-data\")\n\n# loop for remove trRNA sequence\nclean_fq <- list.files(\"2.trim-data/\",pattern = \".fastq.gz\",full.names = T)\noutput_sam <- paste(\"3.rmtrRNA-data/\",sapply(strsplit(clean_fq,split = \"_R1.fastq.gz|/\"), \"[\",2),\n                    \".sam\",sep = \"\")\nrm_trRNAfq <- paste(\"3.rmtrRNA-data/\",sapply(strsplit(clean_fq,split = \"_R1.fastq.gz|/\"), \"[\",2),\n                    \"_rmtrRNA.fq\",sep = \"\")\n\n# x = 1\n# batch align\nlapply(seq_along(clean_fq),function(x){\n  bowtie2_align(index = \"0.index-data/rtRNA-index/sac_trRNA\",\n                fq_file1 = clean_fq[x],\n                output_file = output_sam[x],\n                threads = 24,\n                bowtie2_params = paste(\"--un \",rm_trRNAfq[x],sep = \"\"))\n}) -> tmp\n# ▶ 3.rmtrRNA-data/SRR7471227.sam has been processed!\n# ▶ 3.rmtrRNA-data/SRR7471228.sam has been processed!\n# ▶ 3.rmtrRNA-data/SRR7471229.sam has been processed!\n# ...\n\n# remove tmp sam\nfile.remove(list.files(\"3.rmtrRNA-data/\",pattern = \".sam$\",full.names = T))\n\n# plot mapping info\nmap_info <- list.files(\"3.rmtrRNA-data/\",pattern = \"mapinfo.txt\",full.names = TRUE)\n\nplot_mapinfo(mapinfo_file = map_info,\n             file_name = sapply(strsplit(clean_fq,split = \"\\\\.|/|_R1\"), \"[\",3))\n\n# plot_mapinfo(mapinfo_file = map_info,\n#              file_name = sapply(strsplit(clean_fq,split = \"\\\\.|/|_R1\"), \"[\",3),\n#              plot_type = \"table\")"},{"path":"serp-data-analysis.html","id":"map-to-transcriptome-1","chapter":"6 SeRP data analysis","heading":"6.6 Map to transcriptome","text":"","code":"\n# ==============================================================================\n# map to transcriptome\n# ==============================================================================\ndir.create(\"4.map-data\")\n\n# batch map to genome\nfq_file1 <- list.files(\"3.rmtrRNA-data/\",pattern = \".fq\",full.names = T)\noutput_file <- c('FAS1-trans-rep1','FAS1-inter-rep1','FAS1-trans-rep2','FAS1-inter-rep2',\n                 'FAS2-trans-rep1','FAS2-inter-rep1','FAS2-trans-rep2','FAS2-inter-rep2',\n                 'FAS1-MPTdel-trans-rep1','FAS1-MPTdel-inter-rep1','FAS1-MPTdel-trans-rep2',\n                 'FAS1-MPTdel-trans-rep3','FAS1-MPTdel-inter-rep2','FAS1-MPTdel-inter-rep3',\n                 'FAS2-MPTdel-trans-rep1','FAS2-MPTdel-inter-rep1','FAS2-MPTdel-trans-rep2','FAS2-MPTdel-inter-rep2',\n                 'GUS1-trans-rep1','GUS1-inter-rep1','GUS1-trans-rep2','GUS1-inter-rep2',\n                 'MES1-trans-rep1','MES1-inter-rep1','MES1-trans-rep2','MES1-inter-rep2',\n                 'ARC1-trans-rep1','ARC1-inter-rep1','ARC1-trans-rep2','ARC1-inter-rep2')\n\nbatch_hisat_align(index = \"0.index-data/ref-index/sac_ref\",\n                  fq_file1 = fq_file1,\n                  output_dir = \"4.map-data/\",\n                  output_file = output_file,\n                  threads = 24,hisat2_params = list(k = 1))\n# ▶ FAS1-trans-rep1 has been processed!\n# ▶ FAS1-inter-rep1 has been processed!\n# ▶ FAS1-trans-rep2 has been processed!\n# ...\n\n# plot mapping info\nmap_info_geome <- list.files(\"4.map-data/\",pattern = \"mapinfo.txt\",full.names = TRUE)\n\nplot_mapinfo(mapinfo_file = map_info_geome,\n             file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2))\n\n# plot_mapinfo(mapinfo_file = map_info_geome,\n#              file_name = sapply(strsplit(map_info_geome,split = \"_mapinfo.txt|/\"), \"[\",2),\n#              plot_type = \"table\")"},{"path":"serp-data-analysis.html","id":"ribo-qc-check","chapter":"6 SeRP data analysis","heading":"6.7 Ribo QC check","text":"similar analysis steps like :Length distribution:Frames length distribution:Different region features:frames ratio:Realtive start codon periodicity:","code":"\ndir.create(\"5.analysis-data\")\n\nsetwd(\"5.analysis-data\")\n# ==============================================================================\n# 1_prepare gene annotation file\n# ==============================================================================\n# ...\n# ==============================================================================\n# 2_prepare Ribo QC data\n# ==============================================================================\nsam_file = list.files(\"../4.map-data/\",pattern = \"*sam$\",full.names = TRUE)\nsample_name <- sapply(strsplit(list.files(\"../4.map-data/\",pattern = \"*sam$\"),\n                               split = \".sam\"), \"[\",1)\n\n# run\npre_qc_data(sam_file = sam_file,\n            out_file = paste(sample_name,\".qc.txt\",sep = \"\"),\n            mapping_type = \"transcriptome\",\n            seq_type = \"singleEnd\")\n# ../4.map-data/ARC1-inter-rep1.sam has been processed!\n# ../4.map-data/ARC1-inter-rep2.sam has been processed!\n# ../4.map-data/ARC1-trans-rep1.sam has been processed!\n# ...\n\n# load qc data\nqc_df <- load_qc_data()\nqc_df <- qc_df |> dplyr::filter(length >= 20 & length <= 35)\n\n# check\nhead(qc_df,3)\n#   length framest relst framesp relsp feature counts          sample group\n# 1     29       1   826       0 -1689       3      1 ARC1-inter-rep1    NA\n# 2     24       1   151       0  -306       3      4 ARC1-inter-rep1    NA\n# 3     26       1  3118       0  -714       3      1 ARC1-inter-rep1    NA\n\nqc_df$length <- factor(qc_df$length)\nqc_df$sample <- factor(qc_df$sample,\n                       levels = c('FAS1-trans-rep1','FAS1-trans-rep2',\n                                  'FAS2-trans-rep1','FAS2-trans-rep2',\n                                  'FAS1-MPTdel-trans-rep1','FAS1-MPTdel-trans-rep2','FAS1-MPTdel-trans-rep3',\n                                  'FAS2-MPTdel-trans-rep1','FAS2-MPTdel-trans-rep2',\n                                  'GUS1-trans-rep1','GUS1-trans-rep2',\n                                  'MES1-trans-rep1','MES1-trans-rep2',\n                                  'ARC1-trans-rep1','ARC1-trans-rep2',\n                                  'FAS1-inter-rep1','FAS1-inter-rep2',\n                                  'FAS2-inter-rep1','FAS2-inter-rep2',\n                                  'FAS1-MPTdel-inter-rep1','FAS1-MPTdel-inter-rep2','FAS1-MPTdel-inter-rep3',\n                                  'FAS2-MPTdel-inter-rep1','FAS2-MPTdel-inter-rep2',\n                                  'GUS1-inter-rep1','GUS1-inter-rep2',\n                                  'MES1-inter-rep1','MES1-inter-rep2',\n                                  'ARC1-inter-rep1','ARC1-inter-rep2'))\n# length distribution\nqc_plot(qc_data = qc_df,type = \"length\",facet_wrap_list = list(ncol = 5))\n# length with frame\nqc_plot(qc_data = qc_df,type = \"length_frame\",facet_wrap_list = list(ncol = 5))\n# region features\nqc_plot(qc_data = qc_df,type = \"feature\",facet_wrap_list = list(ncol = 5))\n# all frames\nqc_plot(qc_data = qc_df,type = \"frame\",facet_wrap_list = list(ncol = 5))\n# relative to start/stop site 5x9\nrel_to_start_stop(qc_data = qc_df,type = \"relst\",\n                  facet_wrap_list = list(ncol = 5))\n\n# rel_to_start_stop(qc_data = qc_df,type = \"relsp\",\n#                   facet_wrap_list = list(ncol = 5,scales = \"fixed\"))"},{"path":"serp-data-analysis.html","id":"calculate-ribosome-density","chapter":"6 SeRP data analysis","heading":"6.8 Calculate ribosome density","text":"","code":"\n# calculate Ribo density\npre_ribo_density_data(sam_file = sam_file,\n                      out_file = paste(sample_name,\".density.txt\",sep = \"\"),\n                      mapping_type = \"transcriptome\")\n\n# ../4.map-data/ARC1-inter-rep1.sam has been processed!\n# ../4.map-data/ARC1-inter-rep2.sam has been processed!\n# ../4.map-data/ARC1-trans-rep1.sam has been processed!\n# ..."},{"path":"serp-data-analysis.html","id":"enrichment-analysis","chapter":"6 SeRP data analysis","heading":"6.9 Enrichment analysis","text":"","code":""},{"path":"serp-data-analysis.html","id":"calculate-enrichment-ratio","chapter":"6 SeRP data analysis","heading":"6.9.1 calculate enrichment ratio","text":"step calculate density ratio factor-bound translatome total translatome.\npre_enrichment_data calculate enrichment transcript positions:","code":"\nsetwd(\"5.analysis-data\")\n\ntotal <- paste(\"2.density-data/\",\n               c('FAS1-trans-rep1','FAS1-trans-rep2',\n                 'FAS2-trans-rep1','FAS2-trans-rep2',\n                 'FAS1-MPTdel-trans-rep1','FAS1-MPTdel-trans-rep2','FAS1-MPTdel-trans-rep3',\n                 'FAS2-MPTdel-trans-rep1','FAS2-MPTdel-trans-rep2',\n                 'GUS1-trans-rep1','GUS1-trans-rep2',\n                 'MES1-trans-rep1','MES1-trans-rep2',\n                 'ARC1-trans-rep1','ARC1-trans-rep2'),\n               \".density.txt\",sep = \"\")\n\nip <- paste(\"2.density-data/\",\n            c('FAS1-inter-rep1','FAS1-inter-rep2',\n              'FAS2-inter-rep1','FAS2-inter-rep2',\n              'FAS1-MPTdel-inter-rep1','FAS1-MPTdel-inter-rep2','FAS1-MPTdel-inter-rep3',\n              'FAS2-MPTdel-inter-rep1','FAS2-MPTdel-inter-rep2',\n              'GUS1-inter-rep1','GUS1-inter-rep2',\n              'MES1-inter-rep1','MES1-inter-rep2',\n              'ARC1-inter-rep1','ARC1-inter-rep2'),\n            \".density.txt\",sep = \"\")\n\n# calculate enrich ratio\ndir.create(\"3.enrich-data\")\n\n# output\nout_file <- paste(\"3.enrich-data/\",\n                  c(\"FAS1-rep1\",\"FAS1-rep2\",\"FAS2-rep1\",\"FAS2-rep2\",\n                    \"FAS1-MPTdel-rep1\",\"FAS1-MPTdel-rep2\",\"FAS1-MPTdel-rep3\",\n                    \"FAS2-MPTdel-rep1\",\"FAS2-MPTdel-rep2\",\n                    \"GUS1-rep1\",\"GUS1-rep2\",\"MES1-rep1\",\"MES1-rep2\",\"ARC1-rep1\",\"ARC1-rep2\"),\n                  \".enrich.txt\",sep = \"\")\n\n# run\npre_enrichment_data(riboIP_file = ip,\n                    riboInput_file = total,\n                    output_file = out_file)\n# 3.enrich-data/FAS1-rep1.enrich.txt has been processed!\n# 3.enrich-data/FAS1-rep2.enrich.txt has been processed!\n# 3.enrich-data/FAS2-rep1.enrich.txt has been processed!\n# ..."},{"path":"serp-data-analysis.html","id":"track-plot-2","chapter":"6 SeRP data analysis","heading":"6.9.2 track plot","text":"First show raw seRP figure paper:can still use track_plot visualize output:","code":"\n# ==============================================================================\n# load data and visualize\n# ==============================================================================\ndf_fasx <- load_enrich_data(enrich_data = c(\"3.enrich-data/ARC1-rep1.enrich.txt\",\n                                            \"3.enrich-data/ARC1-rep2.enrich.txt\",\n                                            \"3.enrich-data/GUS1-rep1.enrich.txt\",\n                                            \"3.enrich-data/GUS1-rep2.enrich.txt\",\n                                            \"3.enrich-data/MES1-rep1.enrich.txt\",\n                                            \"3.enrich-data/MES1-rep2.enrich.txt\"),\n                            gene_names = c('ARC1','GUS1','MES1'),\n                            sample_name = c(\"ARC1\",\"ARC1\",\"GUS1\",\"GUS1\",\"MES1\",\"MES1\"))\n\n# check\nhead(df_fasx,3)\n# # A tibble: 3 × 7\n# # Groups:   gene_name, trans_id, codon_pos, type [1]\n#   gene_name trans_id     codon_pos type  sample density density_sd\n#   <chr>     <chr>            <int> <chr> <chr>    <dbl>      <dbl>\n# 1 ARC1      YGL105W_mRNA         1 ribo  ARC1     0.690     0.976\n# 2 ARC1      YGL105W_mRNA         1 ribo  GUS1     0.796     0.0103\n# 3 ARC1      YGL105W_mRNA         1 ribo  MES1     0.868     0.888\n\n# plot 6x10\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_fasx,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T)"},{"path":"serp-data-analysis.html","id":"enrichment-with-slide-window","chapter":"6 SeRP data analysis","heading":"6.9.3 enrichment with slide window","text":"article, author used slide window 20nt smooth enrichment density:can also pre_slideWindow_enrichment_data function.Visualize data:looks much better!","code":"\n# calculate enrich ratio\ndir.create(\"4.swEnrich-data\")\n\ntotal <- paste(\"2.density-data/\",\n               c('GUS1-trans-rep1','GUS1-trans-rep2',\n                 'MES1-trans-rep1','MES1-trans-rep2',\n                 'ARC1-trans-rep1','ARC1-trans-rep2'),\n               \".density.txt\",sep = \"\")\n\nip <- paste(\"2.density-data/\",\n            c('GUS1-inter-rep1','GUS1-inter-rep2',\n              'MES1-inter-rep1','MES1-inter-rep2',\n              'ARC1-inter-rep1','ARC1-inter-rep2'),\n            \".density.txt\",sep = \"\")\n\n# output\nout_file <- paste(\"4.swEnrich-data/\",\n                  c(\"GUS1-rep1\",\"GUS1-rep2\",\"MES1-rep1\",\"MES1-rep2\",\"ARC1-rep1\",\"ARC1-rep2\"),\n                  \".enrich.txt\",sep = \"\")\n\n# run\npre_slideWindow_enrichment_data(riboIP_file = ip,\n                                riboInput_file = total,\n                                gene_list = c('GUS1','ARC1','MES1'),\n                                output_file = out_file)\n# ==============================================================================\n# load data and visualize\n# ==============================================================================\nfile <- list.files(\"4.swEnrich-data/\",\"*.txt\",full.names = T)\nfile\n# [1] \"4.swEnrich-data/ARC1-rep1.enrich.txt\" \"4.swEnrich-data/ARC1-rep2.enrich.txt\"\n# [3] \"4.swEnrich-data/GUS1-rep1.enrich.txt\" \"4.swEnrich-data/GUS1-rep2.enrich.txt\"\n# [5] \"4.swEnrich-data/MES1-rep1.enrich.txt\" \"4.swEnrich-data/MES1-rep2.enrich.txt\"\n\ndf_sw <- load_enrich_data(data_type = \"sw\",\n                            enrich_data = file,\n                            sample_name = c(\"ARC1\",\"ARC1\",\"GUS1\",\"GUS1\",\"MES1\",\"MES1\"))\n\n# check\nhead(df_sw[1:3,])\n# # A tibble: 3 × 7\n# # Groups:   gene_name, trans_id, codon_pos, type [1]\n# gene_name trans_id     codon_pos type  sample density density_sd\n# <chr>     <chr>            <dbl> <chr> <chr>    <dbl>      <dbl>\n# 1 ARC1      YGL105W_mRNA         1 ribo  ARC1      1.82     0.152\n# 2 ARC1      YGL105W_mRNA         1 ribo  GUS1      1.49     0.0293\n# 3 ARC1      YGL105W_mRNA         1 ribo  MES1      2.09     1.33\n\n# plot 6x10\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T)"},{"path":"running-on-linux.html","id":"running-on-linux","chapter":"7 Running on linux","heading":"7 Running on linux","text":"","code":""},{"path":"running-on-linux.html","id":"introduction-1","chapter":"7 Running on linux","heading":"7.1 Introduction","text":"bioinformatics software may require frequent updates, corresponding R packages may updated timely manner may maintained anyone . Therefore, best use relatively new software upstream data analysis. One issue switching Linux systems RStudio can become inconvenient. using RStudio server Linux system, good approach use R functions system system2 call software within Linux system. allows us perform upstream data analysis directly within RStudio.Conda open-source package management system environment management system helps install manage software packages dependencies various programming languages, including Python, R, Ruby, Lua, Java, others. Conda allows create isolated environments different projects set packages dependencies, project can environment without interfering projects.Conda also provides central repository pre-built packages called “conda-forge”, users can find install packages easily. conda, can easily install, update, remove packages dependencies simple command-line interface graphical interfaces like Anaconda Navigator Miniconda.can call softwares installed conda environment use Rstudio directly. following chapter describe Rstudio Ribo-seq upstream data analysis.","code":""},{"path":"running-on-linux.html","id":"prepare-conda-environment","chapter":"7 Running on linux","heading":"7.2 Prepare conda environment","text":"First need install Miniconda:Add channels conda:create activate environment:Last install softwares environment like:","code":"$ wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_23.3.1-0-Linux-x86_64.sh\n$ bash Miniconda3-py39_23.3.1-0-Linux-x86_64.sh$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n$ conda config --add channels bioconda$ conda create -n rnaseq\n$ conda activate rnaseq$ conda install fastqc bowtie2 hisat2 samtools adapterremoval"},{"path":"running-on-linux.html","id":"qc-for-fastq-files","chapter":"7 Running on linux","heading":"7.3 Qc for fastq files","text":"call fastqc conda rnaseq environment check raw fastq files. call_cmd function allow give quoted command excute :","code":"\n# ==============================================================================\n# fastqc for fastq\n# ==============================================================================\ndir.create(\"2.fastqc-data\")\n\nfastqc <- \"/root/miniconda3/envs/rnaseq/bin/fastqc\"\n\ncall_cmd(fastqc,\"-h\")\n# FastQC - A high throughput sequence QC analysis tool\n# \n# SYNOPSIS\n# \n# fastqc seqfile1 seqfile2 .. seqfileN\n# \n# fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] \n# [-c contaminant file] seqfile1 .. seqfileN\n# ...\n\nfastq <- list.files(\"../1.mapping_to_genome/1.raw-data/\",\"*.gz\",full.names = T)[1:2]\nfastq\n# [1] \"../1.mapping_to_genome/1.raw-data//SRR12594201.fastq.gz\"\n# [2] \"../1.mapping_to_genome/1.raw-data//SRR12594205.fastq.gz\"\n\n# get absolute path\nfq_path <- normalizePath(fastq)\nfq_path\n# [1] \"/mnt/f/reanalysis_from_papers/7.ribo-package-test/1.mapping_to_genome/1.raw-data/SRR12594201.fastq.gz\"\n# [2] \"/mnt/f/reanalysis_from_papers/7.ribo-package-test/1.mapping_to_genome/1.raw-data/SRR12594205.fastq.gz\"\n\n# run qc\ncall_cmd(fastqc,\"-t 12\",\"-q\",\"-o 2.fastqc-data/\",fq_path)\n# application/gzip\n# application/gzip\n\n# check files\nlist.files(\"2.fastqc-data\")\n# [1] \"SRR12594201_fastqc.html\" \"SRR12594201_fastqc.zip\"  \"SRR12594205_fastqc.html\" \"SRR12594205_fastqc.zip\""},{"path":"running-on-linux.html","id":"trim-adapters","chapter":"7 Running on linux","heading":"7.4 Trim adapters","text":"Rmove adapters using AdapterRemoval:","code":"\n# ==============================================================================\n# trim adapters\n# ==============================================================================\ndir.create(\"3.trim-data\")\n\nAdapterRemoval <- \"/root/miniconda3/envs/rnaseq/bin/AdapterRemoval\"\n\ncall_cmd(AdapterRemoval,\"-h\")\n# AdapterRemoval ver. 2.3.3\n# \n# This program searches for and removes remnant adapter sequences from\n# your read data.  The program can analyze both single end and paired end\n# data.  For detailed explanation of the parameters, please refer to the\n# man page.  For comments, suggestions  and feedback please contact Stinus\n# Lindgreen (stinus@binf.ku.dk) and Mikkel Schubert (MikkelSch@gmail.com).\n# \n# If you use the program, please cite the paper:\n#   Schubert, Lindgreen, and Orlando (2016). AdapterRemoval v2: rapid\n# adapter trimming, identification, and read merging.\n# BMC Research Notes, 12;9(1):88.\n# \n# http://bmcresnotes.biomedcentral.com/articles/10.1186/s13104-016-1900-2\n# ...\n\n# run trim\n# x = 1\noutput_name <- paste(\"3.trim-data/\",c(\"test1\",\"test2\"),sep = \"\")\nlapply(1:2, function(x){\n  call_cmd(AdapterRemoval,\"--threads 12\",\n           \"--adapter1 CTGTAGGCACCATCAAT\",\n           \"--trim5p 6\",\"--trim3p 4\",\"--minlength 15\",\n           paste(\"--file1\",fq_path[x]),\n           \"--gzip\",\n           paste(\"--basename\",output_name[x]))\n}) -> tmp\n# Trimming single ended reads ...\n# Opening FASTQ file '/mnt/f/reanalysis_from_papers/7.ribo-package-test/1.mapping_to_genome/1.raw-data/SRR12594201.fastq.gz', line numbers start at 1\n# Processed a total of 27,170,397 reads in 3:07.2s; 145,000 reads per second on average ...\n# Trimming single ended reads ...\n# Opening FASTQ file '/mnt/f/reanalysis_from_papers/7.ribo-package-test/1.mapping_to_genome/1.raw-data/SRR12594205.fastq.gz', line numbers start at 1\n# Processed a total of 26,741,698 reads in 2:27.8s; 180,000 reads per second on average ...\n\n# check clean fastqs\nlist.files(\"3.trim-data/\")\n# [1] \"test1.discarded.gz\" \"test1.settings\"     \"test1.truncated.gz\"\n# [4] \"test2.discarded.gz\" \"test2.settings\"     \"test2.truncated.gz\""},{"path":"running-on-linux.html","id":"remove-trna-and-rrna-contamination","chapter":"7 Running on linux","heading":"7.5 Remove tRNA and rRNA contamination","text":"use bowtie2 align reads trRNA index:","code":"\n# ==============================================================================\n# remove rRNA and tRNA contamination\n# ==============================================================================\ndir.create(\"4.rmtrRNA-data\")\n\nbowtie2 <- \"/root/miniconda3/envs/rnaseq/bin/bowtie2\"\n\ncall_cmd(bowtie2,\"-h\")\n# Bowtie 2 version 2.5.1 by Ben Langmead (langmea@cs.jhu.edu, www.cs.jhu.edu/~langmea)\n# Usage: \n#   bowtie2 [options]* -x <bt2-idx> {-1 <m1> -2 <m2> | -U <r> | --interleaved <i> | -b <bam>} [-S <sam>]\n# \n# <bt2-idx>  Index filename prefix (minus trailing .X.bt2).\n# NOTE: Bowtie 1 and Bowtie 2 indexes are not compatible.\n# <m1>       Files with #1 mates, paired with files in <m2>.\n# Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n# <m2>       Files with #2 mates, paired with files in <m1>.\n# Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n# ...\n\n# run mapping\nclean_fq <- list.files(\"3.trim-data/\",\"*.truncated.gz\",full.names = T)\noutput_name <- paste(\"4.rmtrRNA-data/\",c(\"test1_rmtrRNA.fq.gz\",\"test2_rmtrRNA.fq.gz\"),sep = \"\")\nlapply(1:2, function(x){\n  call_cmd(bowtie2,\n           \"-x ../1.mapping_to_genome/0.index-data/rtRNA-index/GRCm38_trRNA\",\n           \"--threads 12\",\n           paste(\"--un-gz\",output_name[x]),\n           paste(\"-U\",clean_fq[x]),\n           paste(\"-S \",output_name[x],\".sam\",sep = \"\"))\n  \n  # remove tmp files\n  file.remove(list.files(\"4.rmtrRNA-data/\",\"*.sam\",full.names = T))\n}) -> tmp\n\n# 27154794 reads; of these:\n#   27154794 (100.00%) were unpaired; of these:\n#     11156550 (41.09%) aligned 0 times\n#     277586 (1.02%) aligned exactly 1 time\n#     15720658 (57.89%) aligned >1 times\n# 58.91% overall alignment rate\n# 26706601 reads; of these:\n#   26706601 (100.00%) were unpaired; of these:\n#     4396448 (16.46%) aligned 0 times\n#     171860 (0.64%) aligned exactly 1 time\n#     22138293 (82.89%) aligned >1 times\n# 83.54% overall alignment rate\n\n# check files\nlist.files(\"4.rmtrRNA-data/\",\"*.gz\")\n# [1] \"test1_rmtrRNA.fq.gz\" \"test2_rmtrRNA.fq.gz\""},{"path":"running-on-linux.html","id":"align-reads-on-genome","chapter":"7 Running on linux","heading":"7.6 Align reads on genome","text":"use hisat2 align clean reads genome:Make index bam files:see, can call linux softwares easily Rstudio need turn linux system write\ncommand line. great.Just try now see can .","code":"\n# ==============================================================================\n# mapping on genome\n# ==============================================================================\ndir.create(\"5.map-data\")\n\nhisat2 <- \"/root/miniconda3/envs/rnaseq/bin/hisat2\"\nsamtools <- \"/root/miniconda3/envs/rnaseq/bin/samtools\"\n\ncall_cmd(hisat2,\"-h\")\n# HISAT2 version 2.2.1 by Daehwan Kim (infphilo@gmail.com, www.ccb.jhu.edu/people/infphilo)\n# Usage: \n#   hisat2 [options]* -x <ht2-idx> {-1 <m1> -2 <m2> | -U <r>} [-S <sam>]\n# \n# <ht2-idx>  Index filename prefix (minus trailing .X.ht2).\n# <m1>       Files with #1 mates, paired with files in <m2>.\n# Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n# <m2>       Files with #2 mates, paired with files in <m1>.\n# Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).\n# ...\n\n# run mapping\nclean_fq <- list.files(\"4.rmtrRNA-data/\",\"*.gz\",full.names = T)\noutput_name <- paste(\"5.map-data/\",c(\"test1.bam\",\"test2.bam\"),sep = \"\")\nlapply(1:2, function(x){\n  call_cmd(hisat2,\n           \"-x ../1.mapping_to_genome/0.index-data/ref-index/GRCm38_ref\",\n           \"--threads 12\",\n           paste(\"-U\",clean_fq[x]),\n           paste(\"|\",samtools,\"sort\",\"-@ 6 -o\",output_name[x]))\n}) -> tmp\n# 11156550 reads; of these:\n#   11156550 (100.00%) were unpaired; of these:\n#     3307706 (29.65%) aligned 0 times\n#     5063068 (45.38%) aligned exactly 1 time\n#     2785776 (24.97%) aligned >1 times\n# 70.35% overall alignment rate\n# [bam_sort_core] merging from 0 files and 6 in-memory blocks...\n# 4396448 reads; of these:\n#   4396448 (100.00%) were unpaired; of these:\n#     1699590 (38.66%) aligned 0 times\n#     1140442 (25.94%) aligned exactly 1 time\n#     1556416 (35.40%) aligned >1 times\n# 61.34% overall alignment rate\n# [bam_sort_core] merging from 0 files and 6 in-memory blocks...\n# index for bam\ncall_cmd(\"ls\",\"5.map-data/*.bam\",\"| xargs -i\",samtools,\"index -@ 12 {}\")\n\n# check files\nlist.files(\"5.map-data/\",\"*\")\n# [1] \"test1.bam\"     \"test1.bam.bai\" \"test2.bam\"     \"test2.bam.bai\""},{"path":"track_plot-supplement.html","id":"track_plot-supplement","chapter":"8 Track_plot supplement","heading":"8 Track_plot supplement","text":"show examples track_plot function.simple plot:Remove trans panel border:can also remove panel borders:Show y axis ticks instead text range:Modify details multiple graph layers:Turn fixed y axis range column:Show x axis:Remove gene structure panel:","code":"\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'))\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T)\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_all_panel_border = T)\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T,\n           show_y_ticks = T)\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T,\n           geom_line_params = list(size = 1),\n           geom_hline_params = list(yintercept = 5,color = \"black\"),\n           geom_ribbon_params = list(alpha = 0.6))\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           remove_trans_panel_border = T,\n           show_y_ticks = T,\n           fixed_col_range = F)\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           show_x_ticks = T)\ntrack_plot(plot_type = \"interactome\",\n           signal_data = df_sw,\n           gene_order = c('GUS1','ARC1','MES1'),\n           sample_order = c('GUS1','MES1','ARC1'),\n           line_col = c('GUS1' = '#4883C6','ARC1' = '#AA356A','MES1' = '#D52C30'),\n           show_x_ticks = T,\n           add_gene_struc = F)"}]
